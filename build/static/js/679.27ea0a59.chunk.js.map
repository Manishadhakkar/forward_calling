{"version":3,"file":"static/js/679.27ea0a59.chunk.js","mappings":"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","sources":["pages/auth/forget/component/forgotPassword.jsx","pages/auth/forget/service/forgor.request.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Loader from \"../../../../components/Loader/Loader\";\r\nimport { useState } from \"react\";\r\nimport { createTheme, ThemeProvider, useTheme } from \"@mui/material/styles\";\r\nimport { tokens } from \"../../../../assets/color/theme\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport \"./styles.css\";\r\nimport { Avatar, Button, IconButton, Typography } from \"@mui/material\";\r\nimport { MdOutlineLock } from \"react-icons/md\";\r\nimport { FaUserLock } from \"react-icons/fa\";\r\nimport { MuiOtpInput } from \"mui-one-time-password-input\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport FormTextField from \"../../../../components/textfield/FormTextField\";\r\nimport {\r\n  forgotConfirmRequest,\r\n  forgotOtpRequest,\r\n} from \"../service/forgor.request\";\r\n\r\nconst defaultTheme = createTheme();\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst ForgotPassword = (props) => {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const colors = tokens(theme.palette.mode);\r\n  const [screen, setScreen] = useState(1);\r\n  const [value, setValue] = useState(\"\");\r\n  const [snackbarOpen, setSnackbarOpen] = useState({\r\n    open: false,\r\n    vertical: \"top\",\r\n    horizontal: \"right\",\r\n  });\r\n  const [barVariant, setBarVariant] = useState(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const { vertical, horizontal, open } = snackbarOpen;\r\n  const [userEmail, setUserEmail] = useState({\r\n    value: \"\",\r\n    error: false,\r\n    success: false,\r\n  });\r\n  const [userPassword, setUserPassword] = useState({\r\n    value: \"\",\r\n    error: false,\r\n    success: false,\r\n  });\r\n  const [userRepassword, setUserRepassword] = useState({\r\n    value: \"\",\r\n    error: false,\r\n    success: false,\r\n  });\r\n  const [confirmErr, setConfirmErr] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (userPassword.value !== \"\") {\r\n      if (\r\n        userPassword.value !== userRepassword.value &&\r\n        userRepassword.value !== \"\"\r\n      ) {\r\n        setConfirmErr(true);\r\n      } else {\r\n        setConfirmErr(false);\r\n      }\r\n    } else {\r\n      setConfirmErr(false);\r\n    }\r\n  }, [userPassword, userRepassword]);\r\n\r\n  const handleChangeEmail = (val) => {\r\n    setUserEmail(val);\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setSnackbarOpen({ ...snackbarOpen, open: false });\r\n  };\r\n  const matchIsNumeric = (text) => {\r\n    const textTest = /[a-zA-Z]/gm;\r\n    const isNumber = typeof text === \"number\";\r\n    const isString = !textTest.test(String(text).toLowerCase());\r\n    return (isNumber || (isString && text !== \"\")) && !isNaN(Number(text));\r\n  };\r\n  const validateChar = (value, index) => {\r\n    return matchIsNumeric(value);\r\n  };\r\n  const handleChange = (newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  const handleChangePassword = (value) => {\r\n    setUserPassword(value);\r\n  };\r\n  const handleChangeRepassword = (value) => {\r\n    setUserRepassword(value);\r\n  };\r\n  const handleReqSendOtp = () => {\r\n    setLoader(true);\r\n    let sendOtp = {\r\n      email: userEmail.value,\r\n    };\r\n    forgotOtpRequest(sendOtp)\r\n      .then((res) => {\r\n        setLoader(false);\r\n        setMessage(res.data.message);\r\n        setBarVariant(\"success\");\r\n        setSnackbarOpen({ ...snackbarOpen, open: true });\r\n        setTimeout(() => setScreen(2), 1000);\r\n        setValue(\"\");\r\n      })\r\n      .catch((err) => {\r\n        setLoader(false);\r\n        setMessage(err.message);\r\n        setBarVariant(\"error\");\r\n        setSnackbarOpen({ ...snackbarOpen, open: true });\r\n        setScreen(1);\r\n        setValue(\"\");\r\n      });\r\n  };\r\n\r\n  const handleResetPassword = (e) => {\r\n    e.preventDefault();\r\n    let resetData = {\r\n      otp: value,\r\n      data: {\r\n        password: userPassword.value,\r\n        password_confirmation: userRepassword.value,\r\n      },\r\n    };\r\n    setLoader(true);\r\n    forgotConfirmRequest(resetData)\r\n      .then((res) => {\r\n        setLoader(false);\r\n        setMessage(res.data.message);\r\n        setBarVariant(\"success\");\r\n        setSnackbarOpen({ ...snackbarOpen, open: true });\r\n        setTimeout(() => {\r\n          navigate(\"/\");\r\n        }, 1000);\r\n        setValue(\"\");\r\n      })\r\n      .catch((err) => {\r\n        setLoader(false);\r\n        setMessage(err.message);\r\n        setBarVariant(\"error\");\r\n        setSnackbarOpen({ ...snackbarOpen, open: true });\r\n      });\r\n  };\r\n\r\n  let isDisable =\r\n    userEmail.value === \"\" || userEmail.error || userEmail.success === false;\r\n\r\n  return (\r\n    <>\r\n      {loader && <Loader />}\r\n      <Snackbar\r\n        open={open}\r\n        anchorOrigin={{ vertical, horizontal }}\r\n        autoHideDuration={2000}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={barVariant}\r\n          sx={{ width: \"100%\" }}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <ThemeProvider theme={defaultTheme}>\r\n        <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\r\n          <CssBaseline />\r\n          <Grid\r\n            className=\"forget_left_grid\"\r\n            item\r\n            xs={false}\r\n            sm={6}\r\n            md={6}\r\n            sx={{\r\n              backgroundColor: colors.primary[500],\r\n            }}\r\n          />\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            md={6}\r\n            component={Paper}\r\n            elevation={5}\r\n            square\r\n            sx={{\r\n              boxShadow: \"none\",\r\n              paddingLeft: \"10px\",\r\n              paddingRight: \"10px\",\r\n              margin: \"auto\",\r\n            }}\r\n          >\r\n            {screen === 1 ? (\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  boxShadow: \"none !important\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <Box\r\n                  component=\"form\"\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    width: \"80%\",\r\n                    [theme.breakpoints.up(\"md\")]: {\r\n                      width: \"60%\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Typography textAlign=\"center\" alignItems=\"center\">\r\n                    <Avatar sx={{ bgcolor: \"secondary.main\" }}>\r\n                      <MdOutlineLock />\r\n                    </Avatar>\r\n                  </Typography>\r\n                  <Typography variant=\"h6\" mb={2} mt={2}>\r\n                    {\"Forgot your password\"}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    gutterBottom\r\n                    align=\"center\"\r\n                    mb={2}\r\n                  >\r\n                    {\r\n                      \"Please enter the email address you'd like your password reset otp sent to\"\r\n                    }\r\n                  </Typography>\r\n                  <FormTextField\r\n                    type=\"email\"\r\n                    label={\"Email Address\"}\r\n                    placeholder={\"Enter email address\"}\r\n                    CustomErrorLine=\"Please enter a valid email\"\r\n                    value={userEmail.value}\r\n                    onChangeText={handleChangeEmail}\r\n                  />\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      width: \"100%\",\r\n                      justifyContent: \"space-between\",\r\n                    }}\r\n                    mt={3}\r\n                  >\r\n                    <Button\r\n                      // type=\"submit\"\r\n                      variant=\"contained\"\r\n                      disabled={isDisable}\r\n                      sx={{\r\n                        textTransform: \"none\",\r\n                      }}\r\n                      onClick={(e) => handleReqSendOtp(e)}\r\n                    >\r\n                      Request OTP\r\n                    </Button>\r\n                    <Button\r\n                      sx={{\r\n                        textTransform: \"none\",\r\n                      }}\r\n                      variant=\"outlined\"\r\n                      onClick={() => navigate(\"/\")}\r\n                    >\r\n                      Back To Login\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            ) : (\r\n              <Box\r\n                sx={{\r\n                  padding: 3,\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  boxShadow: \"none !important\",\r\n                  width: \"100%\",\r\n                }}\r\n              >\r\n                <Box component=\"form\">\r\n                  <Box\r\n                    sx={{\r\n                      padding: 3,\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      alignItems: \"center\",\r\n                      boxShadow: \"none !important\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  >\r\n                    <Typography textAlign=\"center\" alignItems=\"center\">\r\n                      <Avatar sx={{ bgcolor: \"secondary.main\" }}>\r\n                        <FaUserLock />\r\n                      </Avatar>\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" mb={2} mt={2}>\r\n                      {\"Set Password\"}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                      <MuiOtpInput\r\n                        mt={2}\r\n                        length={6}\r\n                        TextFieldsProps={{ placeholder: \"-\" }}\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        validateChar={validateChar}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                      <Typography\r\n                        component=\"h6\"\r\n                        variant=\"body2\"\r\n                        gutterBottom\r\n                        align=\"right\"\r\n                        mt={1}\r\n                        mb={1}\r\n                      >\r\n                        {\"Didn't recieve the OTP?\"}\r\n                        <strong\r\n                          style={{ cursor: \"pointer\" }}\r\n                          onClick={(e) => handleReqSendOtp(e)}\r\n                        >\r\n                          {\" \"}\r\n                          Resend\r\n                        </strong>\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <FormTextField\r\n                        type=\"password\"\r\n                        label={\"Password\"}\r\n                        placeholder={\"Enter Password\"}\r\n                        CustomErrorLine=\"Please enter a proper password\"\r\n                        value={userPassword.value}\r\n                        onChangeText={handleChangePassword}\r\n                        Required\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <FormTextField\r\n                        type=\"password\"\r\n                        label={\"Confirm Password\"}\r\n                        placeholder={\"Re-enter Password\"}\r\n                        CustomErrorLine=\"Please enter a proper same password\"\r\n                        value={userRepassword.value}\r\n                        onChangeText={handleChangeRepassword}\r\n                        Required\r\n                        confirmErr={confirmErr}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      width: \"100%\",\r\n                      justifyContent: \"space-between\",\r\n                    }}\r\n                    mt={3}\r\n                  >\r\n                    <Button\r\n                      onClick={(e) => handleResetPassword(e)}\r\n                      sx={{\r\n                        textTransform: \"none\",\r\n                      }}\r\n                      variant=\"contained\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Reset Password\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => navigate(\"/\")}\r\n                      sx={{\r\n                        textTransform: \"none\",\r\n                      }}\r\n                      variant=\"outlined\"\r\n                    >\r\n                      Back To Login\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import { axios } from \"../../../../api/setup.interseptor\";\r\n\r\nexport const forgotOtpRequest = (body) => {\r\n  return axios({\r\n    method: \"POST\",\r\n    url: \"/forgot-password-otp\",\r\n    data: body,\r\n  });\r\n};\r\nexport const forgotConfirmRequest = (body) => {\r\n  return axios({\r\n    method: \"POST\",\r\n    url: `/password-reset/${body.otp}`,\r\n    data: body.data,\r\n  });\r\n};\r\n"],"names":["defaultTheme","createTheme","Alert","React","props","ref","_jsx","MuiAlert","elevation","variant","theme","useTheme","navigate","useNavigate","colors","tokens","palette","mode","screen","setScreen","useState","value","setValue","snackbarOpen","setSnackbarOpen","open","vertical","horizontal","barVariant","setBarVariant","loader","setLoader","message","setMessage","userEmail","setUserEmail","error","success","userPassword","setUserPassword","userRepassword","setUserRepassword","confirmErr","setConfirmErr","useEffect","handleClose","event","reason","handleReqSendOtp","sendOtp","email","body","axios","method","url","data","then","res","setTimeout","catch","err","handleResetPassword","e","preventDefault","resetData","otp","password","password_confirmation","concat","isDisable","_jsxs","_Fragment","children","Loader","Snackbar","anchorOrigin","autoHideDuration","onClose","severity","sx","width","ThemeProvider","Grid","container","component","height","CssBaseline","className","item","xs","sm","md","backgroundColor","primary","Paper","square","boxShadow","paddingLeft","paddingRight","margin","Box","display","flexDirection","alignItems","breakpoints","up","Typography","textAlign","Avatar","bgcolor","MdOutlineLock","mb","mt","gutterBottom","align","FormTextField","type","label","placeholder","CustomErrorLine","onChangeText","val","justifyContent","Button","disabled","textTransform","onClick","padding","FaUserLock","spacing","MuiOtpInput","length","TextFieldsProps","onChange","newValue","validateChar","index","text","isNumber","isString","test","String","toLowerCase","isNaN","Number","matchIsNumeric","style","cursor","Required"],"sourceRoot":""}