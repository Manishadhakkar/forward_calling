{"version":3,"file":"static/js/6083.1883737f.chunk.js","mappings":"gHAEAA,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAGT,IAAIC,EAA4B,oBAAXC,QAAoD,kBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,CAAK,EAAI,SAAUA,GAAO,OAAOA,GAAyB,oBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,CAAK,EAEvQG,EAAgb,SAAUC,EAAKC,GAAK,GAAIC,MAAMC,QAAQH,GAAQ,OAAOA,EAAY,GAAIN,OAAOC,YAAYN,OAAOW,GAAQ,OAAxf,SAAuBA,EAAKC,GAAK,IAAIG,EAAO,GAAQC,GAAK,EAAUC,GAAK,EAAWC,OAAKC,EAAW,IAAM,IAAK,IAAiCC,EAA7BC,EAAKV,EAAIN,OAAOC,cAAmBU,GAAMI,EAAKC,EAAGC,QAAQC,QAAoBR,EAAKS,KAAKJ,EAAGjB,QAAYS,GAAKG,EAAKU,SAAWb,GAA3DI,GAAK,GAAkE,CAAE,MAAOU,GAAOT,GAAK,EAAMC,EAAKQ,CAAK,CAAE,QAAU,KAAWV,GAAMK,EAAW,QAAGA,EAAW,QAAK,CAAE,QAAU,GAAIJ,EAAI,MAAMC,CAAI,CAAE,CAAE,OAAOH,CAAM,CAAuHY,CAAchB,EAAKC,GAAa,MAAM,IAAIgB,UAAU,uDAA2D,EAE7oBC,EAAW7B,OAAO8B,QAAU,SAAUC,GAAU,IAAK,IAAInB,EAAI,EAAGA,EAAIoB,UAAUP,OAAQb,IAAK,CAAE,IAAIqB,EAASD,UAAUpB,GAAI,IAAK,IAAIsB,KAAOD,EAAcjC,OAAOS,UAAU0B,eAAeC,KAAKH,EAAQC,KAAQH,EAAOG,GAAOD,EAAOC,GAAU,CAAE,OAAOH,CAAQ,EAE3PM,EAAe,WAAc,SAASC,EAAiBP,EAAQQ,GAAS,IAAK,IAAI3B,EAAI,EAAGA,EAAI2B,EAAMd,OAAQb,IAAK,CAAE,IAAI4B,EAAaD,EAAM3B,GAAI4B,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAM3C,OAAOC,eAAe8B,EAAQS,EAAWN,IAAKM,EAAa,CAAE,CAAE,OAAO,SAAUI,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYP,EAAiBM,EAAYnC,UAAWoC,GAAiBC,GAAaR,EAAiBM,EAAaE,GAAqBF,CAAa,CAAG,CAA7hB,GAIfG,EAEJ,SAAiCxC,GAAO,GAAIA,GAAOA,EAAIyC,WAAc,OAAOzC,EAAc,IAAI0C,EAAS,CAAC,EAAG,GAAW,MAAP1C,EAAe,IAAK,IAAI2B,KAAO3B,EAAWP,OAAOS,UAAU0B,eAAeC,KAAK7B,EAAK2B,KAAMe,EAAOf,GAAO3B,EAAI2B,IAAgC,OAAtBe,EAAOC,QAAU3C,EAAY0C,CAAU,CAFhQE,CAFCC,EAAQ,QAwBrB,IAAIC,EAA0B,iBAC1BC,EAA4B,qBAE5BC,EAAmB,WAUrB,SAASA,EAAiBhB,EAAOiB,IA/BnC,SAAyBC,EAAUb,GAAe,KAAMa,aAAoBb,GAAgB,MAAM,IAAIhB,UAAU,oCAAwC,CAgCpJ8B,CAAgBC,KAAMJ,GAGC,oBAAZC,IAETA,EAAU,CAAEI,wBAAyBJ,IAGvCG,KAAKE,MAAQhC,EAAS,CAAC,EAAG,CACxB+B,wBAAyBb,EAAMe,qBAC/BC,QAAQ,EACRC,yBAAyB,EACzBC,aAAa,GACZT,GACHG,KAAKO,mBAAqBP,KAAKE,MAAMD,0BACrCD,KAAKQ,UAAYR,KAAKO,mBACtBP,KAAKS,WAAW7B,EAClB,CA4QA,OApQAF,EAAakB,EAAkB,CAAC,CAC9BrB,IAAK,aACL/B,MAAO,SAAoBoC,GACzB,IAAI8B,EAAQV,KAERW,EAAetE,OAAOuE,KAAKhC,GAE3BiC,EADgB9D,EAAe4D,EAAc,GACjB,GAEhCX,KAAKc,iBAAmBD,EACxBb,KAAKe,+BAAiC,GAEtCf,KAAKgB,OAASpC,EACdQ,EAAM6B,wBAAwB5E,OAAOuE,KAAKhC,EAAMoB,KAAKc,oBAErDzE,OAAOuE,KAAKZ,KAAKgB,OAAOhB,KAAKc,mBAAmBI,SAAQ,SAAU3C,GACP,kBAA9CmC,EAAMM,OAAON,EAAMI,kBAAkBvC,IAC9CmC,EAAMK,+BAA+BlD,KAAKU,EAE9C,IAEAyB,KAAKmB,YAAYnB,KAAKO,oBAElBP,KAAKE,MAAME,QACbJ,KAAKoB,iBAAiBpB,KAAKgB,OAE/B,GAOC,CACDzC,IAAK,mBACL/B,MAAO,SAA0BI,GAC/B,IAAIyE,EAASrB,KAEb3D,OAAOuE,KAAKhE,GAAKsE,SAAQ,SAAUI,GACjC,GAA+B,WAA3B7E,EAAQG,EAAI0E,IACdD,EAAOD,iBAAiBxE,EAAI0E,SACvB,GAA6B,kBAAlB1E,EAAI0E,GAAwB,CAC5C,GAAmC,IAA/B1E,EAAI0E,GAAUC,QAAQ,MAAc3E,EAAI0E,GAAUE,YAAY,OAAS5E,EAAI0E,GAAUxD,OAAS,EAEhG,OAIF,IADA,IAAI2D,EAAS7E,EAAI0E,GAAUI,MAAM,KACxBzE,EAAI,EAAGA,EAAIwE,EAAO3D,OAAQb,GAAK,EACtC,GAAIwE,EAAOxE,GAAG0E,MAAMjC,SAEb,GAAI+B,EAAOxE,GAAG0E,MAAMhC,QAEpB,CACL,IAAIiC,EAAMH,EAAOxE,GAAGa,OAChBuD,EAAOnB,MAAMG,0BACfuB,EAAMC,SAAe,IAAND,EAAW,KAE5BH,EAAOxE,GAAKmC,EAAM0C,aAAaF,EACjC,CAEFhF,EAAI0E,GAAY,IAAMG,EAAOM,KAAK,KAAO,GAC3C,CACF,GACF,GAQC,CACDxD,IAAK,cACL/B,MAAO,SAAqBwF,GAC1B,IAAIC,EAASjC,KAITkC,EAAe9C,EAAM+C,wBAAwBH,EAAUhC,KAAKgB,QAC5DoB,EAAkB/F,OAAOuE,KAAKZ,KAAKgB,QAAQ,GAG/C,GAFAhB,KAAKQ,UAAY0B,EAEblC,KAAKgB,OAAOkB,GAAe,CAE7B,IAAK,IAAIjF,EAAI,EAAGA,EAAI+C,KAAKe,+BAA+BjD,OAAQb,GAAK,SAC5D+C,KAAKA,KAAKe,+BAA+B9D,IAElD,IAAIoF,EAAmBnE,EAAS,CAAC,EAAG8B,KAAKgB,OAAOhB,KAAKQ,YACrDnE,OAAOuE,KAAKyB,GAAkBnB,SAAQ,SAAU3C,GAC9C0D,EAAO1D,GAAO8D,EAAiB9D,EACjC,IAEI6D,IAAoBpC,KAAKQ,YAC3B6B,EAAmBrC,KAAKgB,OAAOoB,GAC/BpC,KAAKsC,gBAAgBD,EAAkBrC,MAE3C,CACF,GAQC,CACDzB,IAAK,kBACL/B,MAAO,SAAyB+F,EAAgBC,GAC9C,IAAIC,EAASzC,KAEb3D,OAAOuE,KAAK2B,GAAgBrB,SAAQ,SAAU3C,GACxClC,OAAOS,UAAU0B,eAAeC,KAAK8D,EAAgBhE,KAASiE,EAAQjE,IAAyB,KAAjBiE,EAAQjE,IACxFiE,EAAQjE,GAAOgE,EAAehE,GAC1BkE,EAAOvC,MAAMI,aACfoC,QAAQC,IAAI,kCAAoCpE,EAAM,gDAAkDkE,EAAOjC,UAAY,kBAE5F,kBAAjBgC,EAAQjE,IAExBkE,EAAOH,gBAAgBC,EAAehE,GAAMiE,EAAQjE,GAExD,GACF,GAOC,CACDA,IAAK,cACL/B,MAAO,WACL,OAAOwD,KAAKQ,SACd,GAMC,CACDjC,IAAK,uBACL/B,MAAO,WACL,OAAOwD,KAAKO,kBACd,GAMC,CACDhC,IAAK,wBACL/B,MAAO,WACL,IAAIoG,EAAS5C,KAQb,OANKA,KAAK6C,sBACR7C,KAAK6C,oBAAsB,GAC3BxG,OAAOuE,KAAKZ,KAAKgB,QAAQE,SAAQ,SAAU3C,GACzCqE,EAAOC,oBAAoBhF,KAAKU,EAClC,KAEKyB,KAAK6C,mBACd,GAWC,CACDtE,IAAK,eACL/B,MAAO,SAAsBsG,GAG3B,IAFA,IAAIC,EAAS/C,KAEJgD,EAAO3E,UAAUP,OAAQmF,EAAwB/F,MAAM8F,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IAC/GD,EAAsBC,EAAO,GAAK7E,UAAU6E,GAG9C,IAAIC,EAAQL,GAAO,GAmBnB,MAlBqB,kBAAVK,IACTA,EAAQnD,KAAKoD,UAAUN,EAAK,MAAM,IAASK,GAEnCA,EAAMzB,MAAM/B,GAA2B0D,QAAO,SAAUC,GAChE,QAASA,CACX,IAAGC,KAAI,SAAUD,GACf,GAAIA,EAAS3B,MAAMhC,GAA4B,CAC7C,IAAI6D,EAAaF,EAASG,MAAM,GAAI,GAChCC,EAAiBX,EAAOK,UAAUI,GACtC,OAAIE,IACAX,EAAO7C,MAAMI,aACfoC,QAAQC,IAAI,kCAAoCW,EAAW,gBAAkBR,EAAM,KAG9E,WAAaU,EAAa,IACnC,CACA,OAAOF,CACT,IAAGvB,KAAK,IACGL,MAAMhC,GAAyB2D,QAAO,SAAUC,GACzD,QAASA,CACX,IAAGC,KAAI,SAAUD,GACf,GAAIA,EAAS3B,MAAMjC,GAA0B,CAC3C,IAAI8D,EAAaF,EAASG,MAAM,GAAI,GAChCE,EAAsBV,EAAsBO,GAEhD,QAA4BhG,IAAxBmG,EAAmC,CACrC,IAAIC,EAA6BX,EAAsB,GAAGO,GAC1D,QAAmChG,IAA/BoG,EAIF,OAAOD,EAHPA,EAAsBC,CAK1B,CAEA,OAAOD,CACT,CACA,OAAOL,CACT,IAAGvB,KAAK,GACV,GAKC,CACDxD,IAAK,YACL/B,MAAO,SAAmB+B,EAAKyD,GAC7B,IAAI6B,EAAcxF,UAAUP,OAAS,QAAsBN,IAAjBa,UAAU,IAAmBA,UAAU,GAEjF,IAGE,IAFA,IAAIyF,EAAU9D,KAAKgB,OAAOgB,GAAYhC,KAAKQ,WACvCuD,EAAQxF,EAAImD,MAAM,KACbzE,EAAI,EAAGA,EAAI8G,EAAMjG,OAAQb,GAAK,EAAG,CACxC,QAA0BO,IAAtBsG,EAAQC,EAAM9G,IAChB,MAAM+G,MAAMD,EAAM9G,IAEpB6G,EAAUA,EAAQC,EAAM9G,GAC1B,CACA,OAAO6G,CACT,CAAE,MAAOG,IACFJ,GAAe7D,KAAKE,MAAMI,aAC7BoC,QAAQC,IAAI,kCAAoCpE,EAAM,mBAAqByD,EAAW,gBAAkBiC,EAAGC,QAE/G,CACA,OAAO,IACT,GAMC,CACD3F,IAAK,aACL/B,MAAO,WACL,OAAOwD,KAAKgB,MACd,KAGKpB,CACT,CAzSuB,GA2SvBrD,EAAAA,QAAkBqD,C,gBClVlBvD,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQ4D,qBAUR,WACE,IAAIU,EAAc,QAClB,GAAyB,qBAAdsD,UACT,OAAOtD,EAET,IAAIuD,EAAMD,UACV,GAAIC,EAAK,CACP,GAAIA,EAAIpC,SACN,OAAOoC,EAAIpC,SAEb,GAAMoC,EAAIC,WAAeD,EAAIC,UAAU,GACrC,OAAOD,EAAIC,UAAU,GAEvB,GAAID,EAAIE,aACN,OAAOF,EAAIE,aAEb,GAAIF,EAAIG,gBACN,OAAOH,EAAIG,eAEf,CACA,OAAO1D,CACT,EA9BAtE,EAAQ4F,wBAqCR,SAAiCH,EAAUpD,GAEzC,GAAIA,EAAMoD,GAAW,OAAOA,EAG5B,IAAIwC,EAAMxC,EAAST,QAAQ,KACvBkD,EAAUD,GAAO,EAAIxC,EAAS0C,UAAU,EAAGF,GAAOxC,EACtD,OAAOpD,EAAM6F,GAAWA,EAAUpI,OAAOuE,KAAKhC,GAAO,EACvD,EA5CArC,EAAQ0E,wBAmDR,SAAiC0D,GAC/B,IAAIC,EAAgB,CAAC,qBAAsB,YAAa,mBAAoB,iCAAkC,UAC9GD,EAAgBzD,SAAQ,SAAU3C,GAChC,IAAoC,IAAhCqG,EAAcrD,QAAQhD,GACxB,MAAM,IAAIyF,MAAMzF,EAAM,mDAE1B,GACF,EAzDAhC,EAAQuF,aA+DR,SAAsBF,GAGpB,IAFA,IAAIiD,EAAO,GACPC,EAAW,iEACN7H,EAAI,EAAGA,EAAI2E,EAAK3E,GAAK,EAC5B4H,GAAQC,EAASC,OAAOC,KAAKC,MAAsBH,GAAhBE,KAAKE,WACzC,OAAOL,CACV,C,iBCrDA,IAAI3G,EAAW7B,OAAO8B,QAAU,SAAUC,GAAU,IAAK,IAAInB,EAAI,EAAGA,EAAIoB,UAAUP,OAAQb,IAAK,CAAE,IAAIqB,EAASD,UAAUpB,GAAI,IAAK,IAAIsB,KAAOD,EAAcjC,OAAOS,UAAU0B,eAAeC,KAAKH,EAAQC,KAAQH,EAAOG,GAAOD,EAAOC,GAAU,CAAE,OAAOH,CAAQ,EAI3P+G,EAAUC,EAFD3F,EAAQ,QAMjB4F,EAAqBD,EAFD3F,EAAQ,OAIhC,SAAS2F,EAAuBxI,GAAO,OAAOA,GAAOA,EAAIyC,WAAazC,EAAM,CAAE2C,QAAS3C,EAAO,CAE9F,IAAI0I,EAAmB,iBAYvBD,EAAmB9F,QAAQzC,UAAUyI,aAAe,SAAUzC,GAC5D,IAAK,IAAIE,EAAO3E,UAAUP,OAAQmF,EAAwB/F,MAAM8F,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IAC/GD,EAAsBC,EAAO,GAAK7E,UAAU6E,GAG9C,IAAIsC,GAAY,EACZC,GAAO3C,GAAO,IAAIpB,MAAM4D,GAAkBjC,QAAO,SAAUC,GAC7D,QAASA,CACX,IAAGC,KAAI,SAAUD,EAAUoC,GACzB,GAAIpC,EAAS3B,MAAM2D,GAAmB,CACpC,IAAI9B,EAAaF,EAASG,MAAM,GAAI,GAChCE,EAAsBV,EAAsBO,GAGhD,QAA2BhG,GAAvBmG,EAAkC,CACpC,IAAIC,EAA6BX,EAAsB,GAAGO,GAC1D,QAAmChG,IAA/BoG,EAIF,OAAOD,EAHPA,EAAsBC,CAK1B,CAEA,OAAIuB,EAAQ5F,QAAQoG,eAAehC,IACjC6B,GAAY,EACLL,EAAQ5F,QAAQqG,SAASC,QAAQlC,GAAqBJ,KAAI,SAAUuC,GACzE,OAAO5H,EAAS,CAAC,EAAG4H,EAAW,CAAEvH,IAAKmH,EAAMK,YAC9C,KAGKpC,CACT,CACA,OAAOL,CACT,IAEA,OAAIkC,EAAkBC,EACfA,EAAI1D,KAAK,GAClB,EAEAxF,EAAQ,EAAU8I,EAAmB9F,O","sources":["../node_modules/localized-strings/lib/LocalizedStrings.js","../node_modules/localized-strings/lib/utils.js","../node_modules/react-localization/lib/LocalizedStrings.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _utils = require(\"./utils\");\n\nvar utils = _interopRequireWildcard(_utils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/localized-strings\n */\n\nvar placeholderReplaceRegex = /(\\{[\\d|\\w]+\\})/;\nvar placeholderReferenceRegex = /(\\$ref\\{[\\w|.]+\\})/;\n\nvar LocalizedStrings = function () {\n  /**\n   * Constructor used to provide the strings objects in various language and the optional callback to get\n   * the interface language\n   * @param {*} props - the strings object\n   * @param {Function} options.customLanguageInterface - the optional method to use to get the InterfaceLanguage\n   * @param {Boolean} options.pseudo - convert all strings to pseudo, helpful when implementing\n   * @param {Boolean} options.pseudoMultipleLanguages - add 40% to pseudo, helps with translations in the future\n   * @param {Boolean} options.logsEnabled - Enable/Disable console.log outputs (default=true)\n   */\n  function LocalizedStrings(props, options) {\n    _classCallCheck(this, LocalizedStrings);\n\n    // Compatibility fix with previous version\n    if (typeof options === \"function\") {\n      /* eslint-disable no-param-reassign */\n      options = { customLanguageInterface: options };\n      /* eslint-enable */\n    }\n    this._opts = _extends({}, {\n      customLanguageInterface: utils.getInterfaceLanguage,\n      pseudo: false,\n      pseudoMultipleLanguages: false,\n      logsEnabled: true\n    }, options);\n    this._interfaceLanguage = this._opts.customLanguageInterface();\n    this._language = this._interfaceLanguage;\n    this.setContent(props);\n  }\n\n  /**\n   * Set the strings objects based on the parameter passed in the constructor\n   * @param {*} props\n   */\n\n\n  _createClass(LocalizedStrings, [{\n    key: \"setContent\",\n    value: function setContent(props) {\n      var _this = this;\n\n      var _Object$keys = Object.keys(props),\n          _Object$keys2 = _slicedToArray(_Object$keys, 1),\n          defaultLang = _Object$keys2[0];\n\n      this._defaultLanguage = defaultLang;\n      this._defaultLanguageFirstLevelKeys = [];\n      // Store locally the passed strings\n      this._props = props;\n      utils.validateTranslationKeys(Object.keys(props[this._defaultLanguage]));\n      // Store first level keys (for identifying missing translations)\n      Object.keys(this._props[this._defaultLanguage]).forEach(function (key) {\n        if (typeof _this._props[_this._defaultLanguage][key] === \"string\") {\n          _this._defaultLanguageFirstLevelKeys.push(key);\n        }\n      });\n      // Set language to its default value (the interface)\n      this.setLanguage(this._interfaceLanguage);\n      // Developermode with pseudo\n      if (this._opts.pseudo) {\n        this._pseudoAllValues(this._props);\n      }\n    }\n\n    /**\n     * Replace all strings to pseudo value\n     * @param {Object} obj - Loopable object\n     */\n\n  }, {\n    key: \"_pseudoAllValues\",\n    value: function _pseudoAllValues(obj) {\n      var _this2 = this;\n\n      Object.keys(obj).forEach(function (property) {\n        if (_typeof(obj[property]) === \"object\") {\n          _this2._pseudoAllValues(obj[property]);\n        } else if (typeof obj[property] === \"string\") {\n          if (obj[property].indexOf(\"[\") === 0 && obj[property].lastIndexOf(\"]\") === obj[property].length - 1) {\n            // already psuedo fixed\n            return;\n          }\n          // @TODO must be a way to get regex to find all replaceble strings except our replacement variables\n          var strArr = obj[property].split(\" \");\n          for (var i = 0; i < strArr.length; i += 1) {\n            if (strArr[i].match(placeholderReplaceRegex)) {\n              // we want to keep this string, includes specials\n            } else if (strArr[i].match(placeholderReferenceRegex)) {\n              // we want to keep this string, includes specials\n            } else {\n              var len = strArr[i].length;\n              if (_this2._opts.pseudoMultipleLanguages) {\n                len = parseInt(len * 1.4, 10); // add length with 40%\n              }\n              strArr[i] = utils.randomPseudo(len);\n            }\n          }\n          obj[property] = \"[\" + strArr.join(\" \") + \"]\"; // eslint-disable-line no-param-reassign\n        }\n      });\n    }\n\n    /**\n     * Can be used from ouside the class to force a particular language\n     * indipendently from the interface one\n     * @param {*} language\n     */\n\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(language) {\n      var _this3 = this;\n\n      // Check if exists a translation for the current language or if the default\n      // should be used\n      var bestLanguage = utils.getBestMatchingLanguage(language, this._props);\n      var defaultLanguage = Object.keys(this._props)[0];\n      this._language = bestLanguage;\n      // Associate the language object to the this object\n      if (this._props[bestLanguage]) {\n        // delete default propery values to identify missing translations\n        for (var i = 0; i < this._defaultLanguageFirstLevelKeys.length; i += 1) {\n          delete this[this._defaultLanguageFirstLevelKeys[i]];\n        }\n        var localizedStrings = _extends({}, this._props[this._language]);\n        Object.keys(localizedStrings).forEach(function (key) {\n          _this3[key] = localizedStrings[key];\n        });\n        // Now add any string missing from the translation but existing in the default language\n        if (defaultLanguage !== this._language) {\n          localizedStrings = this._props[defaultLanguage];\n          this._fallbackValues(localizedStrings, this);\n        }\n      }\n    }\n\n    /**\n     * Load fallback values for missing translations\n     * @param {*} defaultStrings\n     * @param {*} strings\n     */\n\n  }, {\n    key: \"_fallbackValues\",\n    value: function _fallbackValues(defaultStrings, strings) {\n      var _this4 = this;\n\n      Object.keys(defaultStrings).forEach(function (key) {\n        if (Object.prototype.hasOwnProperty.call(defaultStrings, key) && !strings[key] && strings[key] !== \"\") {\n          strings[key] = defaultStrings[key]; // eslint-disable-line no-param-reassign\n          if (_this4._opts.logsEnabled) {\n            console.log(\"\\uD83D\\uDEA7 \\uD83D\\uDC77 key '\" + key + \"' not found in localizedStrings for language \" + _this4._language + \" \\uD83D\\uDEA7\");\n          }\n        } else if (typeof strings[key] !== \"string\") {\n          // It's an object\n          _this4._fallbackValues(defaultStrings[key], strings[key]);\n        }\n      });\n    }\n\n    /**\n     * The current language displayed (could differ from the interface language\n     * if it has been forced manually and a matching translation has been found)\n     */\n\n  }, {\n    key: \"getLanguage\",\n    value: function getLanguage() {\n      return this._language;\n    }\n\n    /**\n     * The current interface language (could differ from the language displayed)\n     */\n\n  }, {\n    key: \"getInterfaceLanguage\",\n    value: function getInterfaceLanguage() {\n      return this._interfaceLanguage;\n    }\n\n    /**\n     * Return an array containing the available languages passed as props in the constructor\n     */\n\n  }, {\n    key: \"getAvailableLanguages\",\n    value: function getAvailableLanguages() {\n      var _this5 = this;\n\n      if (!this._availableLanguages) {\n        this._availableLanguages = [];\n        Object.keys(this._props).forEach(function (key) {\n          _this5._availableLanguages.push(key);\n        });\n      }\n      return this._availableLanguages;\n    }\n\n    // Format the passed string replacing the numbered or tokenized placeholders\n    // eg. 1: I'd like some {0} and {1}, or just {0}\n    // eg. 2: I'd like some {bread} and {butter}, or just {bread}\n    // eg. 3: I'd like some $ref{bread} and $ref{butter}, or just $ref{bread}\n    // Use example:\n    // eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n    // eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter })\n    // eg. 3: strings.formatString(strings.question)\n\n  }, {\n    key: \"formatString\",\n    value: function formatString(str) {\n      var _this6 = this;\n\n      for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        valuesForPlaceholders[_key - 1] = arguments[_key];\n      }\n\n      var input = str || \"\";\n      if (typeof input === \"string\") {\n        input = this.getString(str, null, true) || input;\n      }\n      var ref = input.split(placeholderReferenceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReferenceRegex)) {\n          var matchedKey = textPart.slice(5, -1);\n          var referenceValue = _this6.getString(matchedKey);\n          if (referenceValue) return referenceValue;\n          if (_this6._opts.logsEnabled) {\n            console.log(\"No Localization ref found for '\" + textPart + \"' in string '\" + str + \"'\");\n          }\n          // lets print it another way so next replacer doesn't find it\n          return \"$ref(id:\" + matchedKey + \")\";\n        }\n        return textPart;\n      }).join(\"\");\n      return ref.split(placeholderReplaceRegex).filter(function (textPart) {\n        return !!textPart;\n      }).map(function (textPart) {\n        if (textPart.match(placeholderReplaceRegex)) {\n          var matchedKey = textPart.slice(1, -1);\n          var valueForPlaceholder = valuesForPlaceholders[matchedKey];\n          // If no value found, check if working with an object instead\n          if (valueForPlaceholder === undefined) {\n            var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n            if (valueFromObjectPlaceholder !== undefined) {\n              valueForPlaceholder = valueFromObjectPlaceholder;\n            } else {\n              // If value still isn't found, then it must have been undefined/null\n              return valueForPlaceholder;\n            }\n          }\n\n          return valueForPlaceholder;\n        }\n        return textPart;\n      }).join(\"\");\n    }\n\n    // Return a string with the passed key in a different language or defalt if not set\n    // We allow deep . notation for finding strings\n\n  }, {\n    key: \"getString\",\n    value: function getString(key, language) {\n      var omitWarning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      try {\n        var current = this._props[language || this._language];\n        var paths = key.split(\".\");\n        for (var i = 0; i < paths.length; i += 1) {\n          if (current[paths[i]] === undefined) {\n            throw Error(paths[i]);\n          }\n          current = current[paths[i]];\n        }\n        return current;\n      } catch (ex) {\n        if (!omitWarning && this._opts.logsEnabled) {\n          console.log(\"No localization found for key '\" + key + \"' and language '\" + language + \"', failed on \" + ex.message);\n        }\n      }\n      return null;\n    }\n\n    /**\n     * The current props (locale object)\n     */\n\n  }, {\n    key: \"getContent\",\n    value: function getContent() {\n      return this._props;\n    }\n  }]);\n\n  return LocalizedStrings;\n}();\n\nexports.default = LocalizedStrings;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterfaceLanguage = getInterfaceLanguage;\nexports.getBestMatchingLanguage = getBestMatchingLanguage;\nexports.validateTranslationKeys = validateTranslationKeys;\nexports.randomPseudo = randomPseudo;\n/**\n * Return the current interface language\n * If the navigator object is defined it returns the current navigator language\n * otherwise it falls back to 'en-US'\n * Works in browsers\n */\nfunction getInterfaceLanguage() {\n  var defaultLang = 'en-US';\n  if (typeof navigator === 'undefined') {\n    return defaultLang;\n  }\n  var nav = navigator; // eslint-disable-line no-undef\n  if (nav) {\n    if (nav.language) {\n      return nav.language;\n    }\n    if (!!nav.languages && !!nav.languages[0]) {\n      return nav.languages[0];\n    }\n    if (nav.userLanguage) {\n      return nav.userLanguage;\n    }\n    if (nav.browserLanguage) {\n      return nav.browserLanguage;\n    }\n  }\n  return defaultLang;\n}\n\n/**\n * Get the best match based on the language passed and the available languages\n * @param {*} language\n * @param {*} props\n */\nfunction getBestMatchingLanguage(language, props) {\n  // If an object with the passed language key exists return it\n  if (props[language]) return language;\n\n  // if the string is composed try to find a match with only the first language identifiers (en-US --> en)\n  var idx = language.indexOf('-');\n  var auxLang = idx >= 0 ? language.substring(0, idx) : language;\n  return props[auxLang] ? auxLang : Object.keys(props)[0];\n}\n\n/**\n * Check that the keys used in the provided strings object don't collide with existing property\n * already defined in the LocalizedStrings object\n * @param {*} translationKeys\n */\nfunction validateTranslationKeys(translationKeys) {\n  var reservedNames = ['_interfaceLanguage', '_language', '_defaultLanguage', '_defaultLanguageFirstLevelKeys', '_props'];\n  translationKeys.forEach(function (key) {\n    if (reservedNames.indexOf(key) !== -1) {\n      throw new Error(key + ' cannot be used as a key. It is a reserved word.');\n    }\n  });\n}\n\n/**\n * Get a random pseudo string back after specified a length\n * @param {Number} len - How many characters to get back\n */\nfunction randomPseudo(len) {\n  var text = '';\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < len; i += 1) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }return text;\n}","'use strict';\n/**\n * Simple module to localize the React interface using the same syntax\n * used in the ReactNativeLocalization module\n * (https://github.com/stefalda/ReactNativeLocalization)\n *\n * Originally developed by Stefano Falda (stefano.falda@gmail.com)\n *\n * It uses a call to the Navigator/Browser object to get the current interface language,\n * then display the correct language strings or the default language (the first\n * one if a match is not found).\n *\n * This library has been refactored to use the newly created localized-strings package so to\n * unify the code and make it easier to mantain\n *\n * How to use:\n * Check the instructions at:\n * https://github.com/stefalda/react-localization\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _localizedStrings = require('localized-strings');\n\nvar _localizedStrings2 = _interopRequireDefault(_localizedStrings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar placeholderRegex = /(\\{[\\d|\\w]+\\})/;\n\n/**\n * Format the passed string replacing the numbered or tokenized placeholders\n * eg. 1: I'd like some {0} and {1}, or just {0}\n * eg. 2: I'd like some {bread} and {butter}, or just {bread}\n * Use example:\n * eg. 1: strings.formatString(strings.question, strings.bread, strings.butter)\n * eg. 2: strings.formatString(strings.question, { bread: strings.bread, butter: strings.butter }\n *\n * THIS METHOD OVERRIDE the one of the parent class by adding support for JSX code\n*/\n_localizedStrings2.default.prototype.formatString = function (str) {\n  for (var _len = arguments.length, valuesForPlaceholders = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    valuesForPlaceholders[_key - 1] = arguments[_key];\n  }\n\n  var hasObject = false;\n  var res = (str || '').split(placeholderRegex).filter(function (textPart) {\n    return !!textPart;\n  }).map(function (textPart, index) {\n    if (textPart.match(placeholderRegex)) {\n      var matchedKey = textPart.slice(1, -1);\n      var valueForPlaceholder = valuesForPlaceholders[matchedKey];\n\n      // If no value found, check if working with an object instead\n      if (valueForPlaceholder == undefined) {\n        var valueFromObjectPlaceholder = valuesForPlaceholders[0][matchedKey];\n        if (valueFromObjectPlaceholder !== undefined) {\n          valueForPlaceholder = valueFromObjectPlaceholder;\n        } else {\n          // If value still isn't found, then it must have been undefined/null\n          return valueForPlaceholder;\n        }\n      }\n\n      if (_react2.default.isValidElement(valueForPlaceholder)) {\n        hasObject = true;\n        return _react2.default.Children.toArray(valueForPlaceholder).map(function (component) {\n          return _extends({}, component, { key: index.toString() });\n        });\n      }\n\n      return valueForPlaceholder;\n    }\n    return textPart;\n  });\n  // If the results contains a object return an array otherwise return a string\n  if (hasObject) return res;\n  return res.join('');\n};\n\nexports.default = _localizedStrings2.default;"],"names":["Object","defineProperty","exports","value","_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","arr","i","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","sliceIterator","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","utils","__esModule","newObj","default","_interopRequireWildcard","require","placeholderReplaceRegex","placeholderReferenceRegex","LocalizedStrings","options","instance","_classCallCheck","this","customLanguageInterface","_opts","getInterfaceLanguage","pseudo","pseudoMultipleLanguages","logsEnabled","_interfaceLanguage","_language","setContent","_this","_Object$keys","keys","defaultLang","_defaultLanguage","_defaultLanguageFirstLevelKeys","_props","validateTranslationKeys","forEach","setLanguage","_pseudoAllValues","_this2","property","indexOf","lastIndexOf","strArr","split","match","len","parseInt","randomPseudo","join","language","_this3","bestLanguage","getBestMatchingLanguage","defaultLanguage","localizedStrings","_fallbackValues","defaultStrings","strings","_this4","console","log","_this5","_availableLanguages","str","_this6","_len","valuesForPlaceholders","_key","input","getString","filter","textPart","map","matchedKey","slice","referenceValue","valueForPlaceholder","valueFromObjectPlaceholder","omitWarning","current","paths","Error","ex","message","navigator","nav","languages","userLanguage","browserLanguage","idx","auxLang","substring","translationKeys","reservedNames","text","possible","charAt","Math","floor","random","_react2","_interopRequireDefault","_localizedStrings2","placeholderRegex","formatString","hasObject","res","index","isValidElement","Children","toArray","component","toString"],"sourceRoot":""}