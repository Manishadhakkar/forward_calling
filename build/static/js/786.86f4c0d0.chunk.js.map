{"version":3,"file":"static/js/786.86f4c0d0.chunk.js","mappings":"wOAEO,MAAMA,EAAYC,EAAAA,EAAQ,uBACpBC,EAAYD,EAAAA,EAAQ,uB,0BCUjC,MAgrCA,EAhrCuBE,IACrB,MAAM,KACJC,EAAI,MACJC,EAAK,YACLC,EAAW,MACXC,EAAK,aACLC,EAAY,SACZC,EAAQ,gBACRC,EAAe,OACfC,EAAM,UACNC,EAAS,SACTC,EAAQ,aACRC,EAAY,OACZC,EAAM,YACNC,EAAW,YACXC,EAAW,WACXC,KACGC,GACDhB,EAEEiB,GAAQC,EAAAA,EAAAA,MACPC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC/BC,MAAOlB,GAAgB,GACvBmB,OAAO,EACPC,SAAS,KAEJC,EAAcC,IAAmBL,EAAAA,EAAAA,aACjCE,EAAOI,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAAcC,GAAmBC,EAAAA,UAAe,IACvDC,EAAAA,EAAAA,YAAU,UACaC,IAAjBrB,GACFS,EAAQ,CACNE,MAAO,GACPC,OAAO,EACPC,SAAS,GAEb,GACC,CAACb,KACJoB,EAAAA,EAAAA,YAAU,KACR,QAAqBC,IAAjBrB,EAA4B,CAC9B,IAAIsB,EAAYtB,GAA8B,GAC9C,IAAIuB,GAASC,EAAAA,EAAAA,IAAsBF,GACnCP,EAAgBQ,EAAOE,OACzB,IACC,CAACzB,IAEJ,MAMM0B,EAAoBC,IACxB,MACMC,EADOD,EAAEE,OAAOlB,MACJmB,YAClB,GAAInC,EACF,GAAa,UAATL,EAAkB,CACpB,MAAMyC,EACJ,wJACF,GAAIH,EAAKH,OAAS,EAChB,GAAKM,EAAUC,KAAKC,OAAOL,GAAMM,eAO1B,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAfiD,CAC/C,MAAMA,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KASK,CACLK,EAAS9B,GACT,MAAMyB,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CACF,MAAO,GAAa,SAATrB,EAAiB,CAC1B,MAAM6C,EAAW,iBACjB,GAAIP,EAAKH,OAAS,EAChB,GAAKU,EAASH,KAAKC,OAAOL,GAAMM,eAOzB,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAfgD,CAC9C,MAAMA,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KASK,CACLK,EAAS9B,GACT,MAAMyB,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CACF,MACE,GAAIiB,EAAKH,OAAS,EAAG,CACnBT,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAAO,CACLK,EAAS9B,GACT,MAAMyB,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,MA0DG,IAAKhB,EACV,GAAa,UAATL,EACF,GAAIsC,EAAKH,OAAS,EAAG,CAGnB,GADE,wJACaO,KAAKC,OAAOL,GAAMM,eAO1B,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAfiD,CAC/C,MAAMA,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CASF,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,MACK,GAAa,SAATrB,EACT,GAAIsC,EAAKH,OAAS,EAAG,CAEnB,GADiB,iBACHO,KAAKC,OAAOL,GAAMM,eAOzB,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAfgD,CAC9C,MAAMA,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CASF,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,MAEA,GAAIiB,EAAKH,OAAS,EAAG,CAEnB,GADkB,iCACHO,KAAKC,OAAOL,GAAMM,eAO1B,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAfiD,CAC/C,MAAMA,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CASF,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CA0DJ,EAGIyB,EAAkBT,IACtB,MACMC,EADOD,EAAEE,OAAOlB,MACJmB,YAClB,GAAInC,EACF,GAAa,UAATL,EACF,GAAIsC,EAAKH,QAAU,EAAG,CACpBT,EAAS9B,GACT,MAAMyB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAAO,CAGL,GADE,wJACaqB,KAAKC,OAAOL,GAAMM,eAS1B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBiD,CAC/CK,EAASpB,GAAoCR,GAC7C,MAAMuB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,MACK,GAAa,SAATrB,EACT,GAAIsC,EAAKH,QAAU,EAAG,CACpBT,EAAS9B,GACT,MAAMyB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAAO,CAEL,GADmB,iBACHqB,KAAKC,OAAOL,GAAMM,eAS3B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBkD,CAChDK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,MAEA,GAAIiB,EAAKH,QAAU,EAAG,CACpBT,EAAS9B,GACT,MAAMyB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAAO,CAEL,GADmB,iCACHqB,KAAKC,OAAOL,GAAMM,eAS3B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBkD,CAChDK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,MAkEG,IAAKhB,GAAYiC,EAAKH,OAAS,EACpC,GAAa,UAATnC,EAAkB,CAGpB,GADE,wJACa0C,KAAKC,OAAOL,GAAMM,eAS1B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBiD,CAC/CK,EAASpB,GAAoCR,GAC7C,MAAMuB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,MAAO,GAAa,SAATrB,EAAiB,CAE1B,GADmB,iBACH0C,KAAKC,OAAOL,GAAMM,eAS3B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBkD,CAChDK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,KAAO,CAEL,GADmB,iCACHqB,KAAKC,OAAOL,GAAMM,eAS3B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBkD,CAChDK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUK,CA2CT,EA+SF,OACE0B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACY,aAATjD,GACCkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACI,EAAAA,GAAa,CACZC,OAAO,SACPC,KAAK,QACLC,WAAS,EACTC,OAAQ7C,EAERW,MAAOlB,GAAgBe,EAAKG,MAC5BmC,cAxTkBnB,IAC1B,MACMC,EADOD,EAAEhB,MACGmB,YAClB,GAAInC,EACF,GAAIiC,EAAKH,OAAS,EAChB,GAAIG,EAAKH,OAASX,GAAgBc,EAAKH,OAASX,EAAc,CAC5DE,EAASpB,GACT,MAAMe,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KACK,CACLK,EAAS9B,GACT,MAAMyB,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,MACK,IAAKhB,EACV,GAAIiC,EAAKH,OAAS,EAChB,GAAIG,EAAKH,OAASX,GAAgBc,EAAKH,OAASX,EAAc,CAC5DE,EAASpB,GACT,MAAMe,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KACK,CACLK,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CACF,EA8PQoC,OAASpB,GA5POA,KACxBA,EAAEqB,iBACWrB,EAAEE,OAAOlB,KAAK,EA0PJsC,CAAiBtB,GAChCuB,sBAAsB,EACtBC,YAAaC,EAAAA,EACb5D,YAAaA,EACbD,MAAOA,EACP8D,SAAU1D,IAEXiB,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,OAGpC,aAATtB,GACFkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACR9D,KAAM2B,EAAe,OAAS,WAC9BwC,SAAU3D,EACV4C,OAAO,SACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACb6D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SAAUhC,EACVqB,OAASpB,IACPS,EAAeT,EAAE,EAEnBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnBC,QAAS/D,EAAW,OAAS,SAE/BgE,WAAY,CACVC,cACE3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAc,CAACC,SAAS,MAAK3B,UAC5BF,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CACT,aAAW,6BACXC,QA35BcC,IAAMnD,GAAiBoD,IAAUA,IA45B/CC,YA15BeC,IAC/BA,EAAMxB,gBAAgB,EA05BNyB,KAAK,MAAKlC,SAETtB,GAAeoB,EAAAA,EAAAA,KAACqC,EAAAA,IAAe,KAAMrC,EAAAA,EAAAA,KAACsC,EAAAA,IAAY,WAO5D/D,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,IAE5CR,IACCiC,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SACtC,kCAII,YAATjD,GACFkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRK,SAAU3D,EACV4C,OAAO,SACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACb6D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SApUiB/B,IAEzB,MACMC,EADOD,EAAEE,OAAOlB,MACJmB,YAClB,GAAInC,EAAU,CAEZ,GADiB,gBACHqC,KAAKC,OAAOL,GAAMM,eAQzB,CACLlB,EAAS,IACT,MAAML,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,KAhBgD,CAC9CK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,CACZA,MAAOiB,EACPf,SAAS,GAEXnB,EAAaiB,GACbF,EAAQE,EACV,CASF,MAAO,IAAKhB,EACV,GAAIiC,EAAKH,OAAS,EAAG,CAEnB,GADmB,iBACHO,KAAKC,OAAOL,GAAMM,eAS3B,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBkD,CAChDK,EAASpB,GAAoC,SAC7C,MAAMe,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,KAAO,CACLK,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CACF,EA8QQoC,OAASpB,IA3QMA,KACvBA,EAAEqB,iBACF,MACMpB,EADOD,EAAEE,OAAOlB,MACJmB,YAClB,GAAInC,EACF,GAAIiC,EAAKH,QAAU,EAAG,CACpBT,EAAS9B,GACT,MAAMyB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,MAEE,GADiB,gBACHqB,KAAKC,OAAOL,GAAMM,eASzB,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBgD,CAC9CK,EAASpB,GAAoCR,GAC7C,MAAMuB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,MAWG,IAAKhB,GAAYiC,EAAKH,OAAS,EAEpC,GADiB,gBACHO,KAAKC,OAAOL,GAAMM,eASzB,CACLlB,EAAS,IACT,MAAML,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,KAlBgD,CAC9CK,EAASpB,GAAoCR,GAC7C,MAAMuB,EAAQ,IACTH,EACHI,OAAO,EACPC,SAAS,GAEXJ,EAAQE,GACRjB,EAAaiB,EACf,CAUF,EAmNUiE,CAAgBjD,EAAE,EAEpBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnBC,QAAS/D,EAAW,OAAS,SAE/BgE,WAAY,CACVc,gBACErC,EAAAA,EAAAA,MAACyB,EAAAA,EAAc,CAACC,SAAS,MAAMX,GAAI,CAAEuB,GAAI,GAAIvC,SAAA,CAAC,KACzCtC,QAMVW,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,OAGpC,UAATtB,GACFkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRK,SAAU3D,EACV4C,OAAO,SACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACbF,KAAMA,EACN+D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SAAUhC,EACVqB,OAASpB,IACPS,EAAeT,EAAE,EAEnBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnBC,QAAS/D,EAAW,OAAS,SAE/BgE,WAAY,CACVc,gBACExC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAc,CAACC,SAAS,MAAMX,GAAI,CAAEuB,GAAI,GAAIvC,SAC1CpC,OAKRS,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,OAGpC,WAATtB,GACFkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACRK,SAAU3D,EACV4C,OAAO,SACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACbF,KAAMA,EACN+D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SAAUhC,EACVqB,OAASpB,IACPS,EAAeT,EAAE,EAEnBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnB,qCAAsC,CAAC,EAEvCC,QAAS/D,EAAW,OAAS,YAE3BM,IAELO,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,OAIpC,aAATtB,GACAkD,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACR2B,UAAoB,aAATzF,EACXmE,SAAU3D,EACV4C,OAAO,OACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACbF,KAAMA,EACN+D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SAAUhC,EACVqB,OAASpB,IACPS,EAAeT,EAAE,EAEnBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnBC,QAAS/D,EAAW,OAAS,YAE3BM,IAELO,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CACb0B,MAAO,CACLlB,QAAS/D,EAAW,OAAS,SAE/BwD,GAAI,CAAEC,MAAO,WAAYjB,SAExB3B,QAKP4B,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CACR2B,UAAW7E,EACXuD,SAAU3D,EACV4C,OAAO,SACP7C,OAAQA,EACR+C,WAAS,EACTrD,MAAOA,EACPC,YAAaA,EACbF,KAAMA,EACN+D,SAAU1D,EACVgB,MAAOlB,GAAgBe,EAAKG,MAC5B+C,SAAUhC,EACVqB,OAASpB,IACPS,EAAeT,EAAE,EAEnBf,QAAOA,EACP+B,KAAK,QACLY,GAAI,CACF,wBAAyB,CACvBC,MACyB,SAAvBlD,EAAMqD,QAAQC,KACV,qBACA,sBAER,4BAA6B,CAC3BC,gBAAiB,mBAEnB,qCAAsC,CAAC,EAEvCC,QAAS/D,EAAW,OAAS,YAE3BM,IAELO,IACCyB,EAAAA,EAAAA,KAACiB,EAAAA,EAAc,CAACC,GAAI,CAAEC,MAAO,WAAYjB,SAAE3B,QAIlD,C,6tBCtrCA,IAIHzB,EAJO8F,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,SACnDH,KAAKC,MAAMC,aAAaC,QAAQ,SAChC,KAIClG,IACHA,EAAU,IAAImG,EAAAA,EAAiB,CAC7BC,GACF,KAGFpG,EAAQqG,YAAYP,GAEpB,S","sources":["components/textfield/textFieldString.js","components/textfield/FormTextField.jsx","translation/index.js"],"sourcesContent":["import strings from \"../../translation/index\";\n\nexport const ERR_BLANK = strings[\"TEXTFIELD.ERR_BLANK\"];\nexport const ERR_EMAIL = strings[\"TEXTFIELD.ERR_EMAIL\"];\n","import React, { useEffect, useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { PatternFormat } from \"react-number-format\";\nimport { MdVisibility, MdVisibilityOff } from \"react-icons/md\";\nimport {\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  useTheme,\n} from \"@mui/material\";\nimport { ERR_BLANK, ERR_EMAIL } from \"./textFieldString\";\nimport { removeSpacesAndBraces } from \"../../utility/utilty\";\n\nconst FormTextField = (props) => {\n  const {\n    type,\n    label,\n    placeholder,\n    Value,\n    onChangeText,\n    Required,\n    CustomErrorLine,\n    hidden,\n    isDisable,\n    isHidden,\n    customFormat,\n    prefix,\n    isMultiline,\n    priceSymbol,\n    confirmErr,\n    ...rest\n  } = props;\n\n  const theme = useTheme();\n  const [name, setName] = useState({\n    value: Value ? Value : \"\",\n    error: false,\n    success: false,\n  });\n  const [formatLength, setFormatLength] = useState();\n  const [error, setError] = useState(\"\");\n  const [showPassword, setShowPassword] = React.useState(false);\n  useEffect(() => {\n    if (customFormat !== undefined) {\n      setName({\n        value: \"\",\n        error: false,\n        success: false,\n      });\n    }\n  }, [customFormat]);\n  useEffect(() => {\n    if (customFormat !== undefined) {\n      let inputData = customFormat ? customFormat : \"\";\n      var output = removeSpacesAndBraces(inputData);\n      setFormatLength(output.length);\n    }\n  }, [customFormat]);\n\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const handleChangeText = (e) => {\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      if (type === \"email\") {\n        const emailTest =\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (data.length > 0) {\n          if (!emailTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(ERR_BLANK);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"text\") {\n        const textTest = /^[a-zA-Z ]*$/gm;\n        if (data.length > 0) {\n          if (!textTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(ERR_BLANK);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"textarea\" || \"password\") {\n        if (data.length > 0) {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        } else {\n          setError(ERR_BLANK);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"alpha\") {\n        const alphaTest = /^[a-zA-Z0-9 ]*$/gm;\n        if (data.length > 0) {\n          if (!alphaTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(ERR_BLANK);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"num\") {\n        const alphaTest = /^[0-9]*$/gm;\n        if (data.length > 0) {\n          if (!alphaTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(ERR_BLANK);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      }\n    } else if (!Required) {\n      if (type === \"email\") {\n        if (data.length > 0) {\n          const emailTest =\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          if (!emailTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"text\") {\n        if (data.length > 0) {\n          const textTest = /^[a-zA-Z ]*$/gm;\n          if (!textTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"textarea\" || \"password\") {\n        if (data.length > 0) {\n          const textRegex = /[\\w[\\]`!@#$%&*()={}:;<>+'-]*/gm;\n          if (!textRegex.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"alpha\") {\n        if (data.length > 0) {\n          const alphaTest = /^[a-zA-Z0-9 ]*$/gm;\n          if (!alphaTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else if (type === \"num\") {\n        if (data.length > 0) {\n          const alphaTest = /^[0-9]*$/gm;\n          if (!alphaTest.test(String(data).toLowerCase())) {\n            const value = {\n              value: data,\n              success: false,\n            };\n            onChangeText(value);\n            setName(value);\n          } else {\n            setError(\"\");\n            const value = {\n              value: data,\n              success: true,\n            };\n            onChangeText(value);\n            setName(value);\n          }\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      }\n    }\n  };\n\n  const handleBlurText = (e) => {\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      if (type === \"email\") {\n        if (data.length <= 0) {\n          setError(ERR_BLANK);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          const emailTest =\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          if (!emailTest.test(String(data).toLowerCase())) {\n            setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n            const value = {\n              ...name,\n              error: true,\n              success: false,\n            };\n            setName(value);\n            onChangeText(value);\n          } else {\n            setError(\"\");\n            const value = {\n              ...name,\n              error: false,\n              success: true,\n            };\n            setName(value);\n            onChangeText(value);\n          }\n        }\n      } else if (type === \"text\") {\n        if (data.length <= 0) {\n          setError(ERR_BLANK);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          const textSRegex = /^[a-zA-Z ]*$/gm;\n          if (!textSRegex.test(String(data).toLowerCase())) {\n            setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n            const value = {\n              ...name,\n              error: true,\n              success: false,\n            };\n            setName(value);\n            onChangeText(value);\n          } else {\n            setError(\"\");\n            const value = {\n              ...name,\n              error: false,\n              success: true,\n            };\n            setName(value);\n            onChangeText(value);\n          }\n        }\n      } else if (type === \"textarea\" || \"password\") {\n        if (data.length <= 0) {\n          setError(ERR_BLANK);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          const textSRegex = /[\\w[\\]`!@#$%&*()={}:;<>+'-]*/gm;\n          if (!textSRegex.test(String(data).toLowerCase())) {\n            setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n            const value = {\n              ...name,\n              error: true,\n              success: false,\n            };\n            setName(value);\n            onChangeText(value);\n          } else {\n            setError(\"\");\n            const value = {\n              ...name,\n              error: false,\n              success: true,\n            };\n            setName(value);\n            onChangeText(value);\n          }\n        }\n      } else if (type === \"alpha\") {\n        if (data.length <= 0) {\n          setError(ERR_BLANK);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          const alphaRegex = /^[a-zA-Z0-9 ]*$/gm;\n          if (!alphaRegex.test(String(data).toLowerCase())) {\n            setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n            const value = {\n              ...name,\n              error: true,\n              success: false,\n            };\n            setName(value);\n            onChangeText(value);\n          } else {\n            setError(\"\");\n            const value = {\n              ...name,\n              error: false,\n              success: true,\n            };\n            setName(value);\n            onChangeText(value);\n          }\n        }\n      } else if (type === \"num\") {\n        if (data.length <= 0) {\n          setError(ERR_BLANK);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          const alphaRegex = /^[0-9 ]*$/gm;\n          if (!alphaRegex.test(String(data).toLowerCase())) {\n            setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n            const value = {\n              ...name,\n              error: true,\n              success: false,\n            };\n            setName(value);\n            onChangeText(value);\n          } else {\n            setError(\"\");\n            const value = {\n              ...name,\n              error: false,\n              success: true,\n            };\n            setName(value);\n            onChangeText(value);\n          }\n        }\n      }\n    } else if (!Required && data.length > 0) {\n      if (type === \"email\") {\n        const emailTest =\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (!emailTest.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else if (type === \"text\") {\n        const textSRegex = /^[a-zA-Z ]*$/gm;\n        if (!textSRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else if (type === \"textarea\" || \"password\") {\n        const textSRegex = /[\\w[\\]`!@#$%&*()={}:;<>+'-]*/gm;\n        if (!textSRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else if (type === \"alpha\") {\n        const alphaRegex = /^[a-zA-Z0-9 ]*$/gm;\n        if (!alphaRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else if (type === \"num\") {\n        const alphaRegex = /^[0-9 ]*$/gm;\n        if (!alphaRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      }\n    }\n  };\n  const handleChangeNumber = (e) => {\n    const text = e.value;\n    const data = text.trimStart();\n    if (Required) {\n      if (data.length > 0) {\n        if (data.length > formatLength || data.length < formatLength) {\n          setError(CustomErrorLine);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else {\n        setError(ERR_BLANK);\n        const value = {\n          value: data,\n          success: false,\n        };\n        onChangeText(value);\n        setName(value);\n      }\n    } else if (!Required) {\n      if (data.length > 0) {\n        if (data.length > formatLength || data.length < formatLength) {\n          setError(CustomErrorLine);\n          const value = {\n            value: data,\n            success: false,\n          };\n          onChangeText(value);\n          setName(value);\n        } else {\n          setError(\"\");\n          const value = {\n            value: data,\n            success: true,\n          };\n          onChangeText(value);\n          setName(value);\n        }\n      } else {\n        setError(\"\");\n        const value = {\n          value: data,\n          success: true,\n        };\n        onChangeText(value);\n        setName(value);\n      }\n    }\n  };\n  const handleBlurNumber = (e) => {\n    e.preventDefault();\n    const text = e.target.value;\n  };\n\n  const handleChangePhone = (e) => {\n    // e.preventDefault();\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      const phnRegex = /^\\d{10,14}$/gm;\n      if (!phnRegex.test(String(data).toLowerCase())) {\n        setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n        const value = {\n          value: data,\n          success: false,\n        };\n        onChangeText(value);\n        setName(value);\n      } else {\n        setError(\"\");\n        const value = {\n          value: data,\n          success: true,\n        };\n        onChangeText(value);\n        setName(value);\n      }\n    } else if (!Required) {\n      if (data.length > 0) {\n        const textSRegex = /^[a-zA-Z ]*$/gm;\n        if (!textSRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else {\n        setError(\"\");\n        const value = {\n          ...name,\n          error: false,\n          success: true,\n        };\n        setName(value);\n        onChangeText(value);\n      }\n    }\n  };\n\n  const handleBlurPhone = (e) => {\n    e.preventDefault();\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      if (data.length <= 0) {\n        setError(ERR_BLANK);\n        const value = {\n          ...name,\n          error: true,\n          success: false,\n        };\n        setName(value);\n        onChangeText(value);\n      } else {\n        const phoneRex = /^\\d{10,14}$/gm;\n        if (!phoneRex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      }\n    } else if (!Required && data.length > 0) {\n      const phoneRex = /^\\d{10,14}$/gm;\n      if (!phoneRex.test(String(data).toLowerCase())) {\n        setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n        const value = {\n          ...name,\n          error: true,\n          success: false,\n        };\n        setName(value);\n        onChangeText(value);\n      } else {\n        setError(\"\");\n        const value = {\n          ...name,\n          error: false,\n          success: true,\n        };\n        setName(value);\n        onChangeText(value);\n      }\n    }\n  };\n\n  const handleChangePrice = (e) => {\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      const priceRegex = /^\\d{1,3}(,\\d{3})*(\\.\\d{2})?$/gm;\n      if (!priceRegex.test(String(data).toLowerCase())) {\n        setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n        const value = {\n          value: data,\n          success: false,\n        };\n        onChangeText(value);\n        setName(value);\n      } else {\n        setError(\"\");\n        const value = {\n          value: data,\n          success: true,\n        };\n        onChangeText(value);\n        setName(value);\n      }\n    } else if (!Required) {\n      if (data.length > 0) {\n        const priceRegex = /^\\d{1,3}(,\\d{3})*(\\.\\d{2})?$/gm;\n        if (!priceRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : \"Error\");\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      } else {\n        setError(\"\");\n        const value = {\n          ...name,\n          error: false,\n          success: true,\n        };\n        setName(value);\n        onChangeText(value);\n      }\n    }\n  };\n\n  const handleBlurPrice = (e) => {\n    e.preventDefault();\n    const text = e.target.value;\n    const data = text.trimStart();\n    if (Required) {\n      if (data.length <= 0) {\n        setError(ERR_BLANK);\n        const value = {\n          ...name,\n          error: true,\n          success: false,\n        };\n        setName(value);\n        onChangeText(value);\n      } else {\n        const priceRegex = /^\\d{1,3}(,\\d{3})*(\\.\\d{2})?$/gm;\n        if (!priceRegex.test(String(data).toLowerCase())) {\n          setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n          const value = {\n            ...name,\n            error: true,\n            success: false,\n          };\n          setName(value);\n          onChangeText(value);\n        } else {\n          setError(\"\");\n          const value = {\n            ...name,\n            error: false,\n            success: true,\n          };\n          setName(value);\n          onChangeText(value);\n        }\n      }\n    } else if (!Required && data.length > 0) {\n      const priceRegex = /^\\d{1,3}(,\\d{3})*(\\.\\d{2})?$/gm;\n      if (!priceRegex.test(String(data).toLowerCase())) {\n        setError(CustomErrorLine ? CustomErrorLine : ERR_EMAIL);\n        const value = {\n          ...name,\n          error: true,\n          success: false,\n        };\n        setName(value);\n        onChangeText(value);\n      } else {\n        setError(\"\");\n        const value = {\n          ...name,\n          error: false,\n          success: true,\n        };\n        setName(value);\n        onChangeText(value);\n      }\n    }\n  };\n\n  return (\n    <>\n      {type === \"formatNo\" ? (\n        <>\n          <PatternFormat\n            margin=\"normal\"\n            size=\"small\"\n            fullWidth\n            format={customFormat}\n            // format={\"+ (##) #### ###\"}\n            value={Value ? Value : name.value}\n            onValueChange={handleChangeNumber}\n            onBlur={(e) => handleBlurNumber(e)}\n            valueIsNumericString={true}\n            customInput={TextField}\n            placeholder={placeholder}\n            label={label}\n            required={Required}\n          />\n          {error && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n          )}\n        </>\n      ) : type === \"password\" ? (\n        <>\n          <TextField\n            type={showPassword ? \"text\" : \"password\"}\n            disabled={isDisable}\n            margin=\"normal\"\n            hidden={hidden}\n            fullWidth\n            label={label}\n            placeholder={placeholder}\n            required={Required}\n            value={Value ? Value : name.value}\n            onChange={handleChangeText}\n            onBlur={(e) => {\n              handleBlurText(e);\n            }}\n            error={error ? true : false}\n            size=\"small\"\n            sx={{\n              \"& .MuiInputLabel-root\": {\n                color:\n                  theme.palette.mode === \"dark\"\n                    ? \"#FAF0E6 !important\"\n                    : \"#352F44 !important\",\n              },\n              \"& .MuiOutlinedInput-input\": {\n                backgroundColor: \"none !important\",\n              },\n              display: isHidden ? \"none\" : \"block\",\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                  >\n                    {showPassword ? <MdVisibilityOff /> : <MdVisibility />}\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          {error && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n          )}\n          {confirmErr && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>\n              {\"The passwords do not match\"}\n            </FormHelperText>\n          )}\n        </>\n      ) : type === \"phoneNo\" ? (\n        <>\n          <TextField\n            disabled={isDisable}\n            margin=\"normal\"\n            hidden={hidden}\n            fullWidth\n            label={label}\n            placeholder={placeholder}\n            required={Required}\n            value={Value ? Value : name.value}\n            onChange={handleChangePhone}\n            onBlur={(e) => {\n              handleBlurPhone(e);\n            }}\n            error={error ? true : false}\n            size=\"small\"\n            sx={{\n              \"& .MuiInputLabel-root\": {\n                color:\n                  theme.palette.mode === \"dark\"\n                    ? \"#FAF0E6 !important\"\n                    : \"#352F44 !important\",\n              },\n              \"& .MuiOutlinedInput-input\": {\n                backgroundColor: \"none !important\",\n              },\n              display: isHidden ? \"none\" : \"block\",\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"end\" sx={{ mr: 1 }}>\n                  + {prefix}\n                </InputAdornment>\n              ),\n            }}\n          />\n\n          {error && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n          )}\n        </>\n      ) : type === \"price\" ? (\n        <>\n          <TextField\n            disabled={isDisable}\n            margin=\"normal\"\n            hidden={hidden}\n            fullWidth\n            label={label}\n            placeholder={placeholder}\n            type={type}\n            required={Required}\n            value={Value ? Value : name.value}\n            onChange={handleChangeText}\n            onBlur={(e) => {\n              handleBlurText(e);\n            }}\n            error={error ? true : false}\n            size=\"small\"\n            sx={{\n              \"& .MuiInputLabel-root\": {\n                color:\n                  theme.palette.mode === \"dark\"\n                    ? \"#FAF0E6 !important\"\n                    : \"#352F44 !important\",\n              },\n              \"& .MuiOutlinedInput-input\": {\n                backgroundColor: \"none !important\"  \n              },\n              display: isHidden ? \"none\" : \"block\",\n            }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"end\" sx={{ mr: 1 }}>\n                  {priceSymbol}\n                </InputAdornment>\n              ),\n            }}\n          />\n          {error && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n          )}\n        </>\n      ) : type === \"number\" ? (\n        <>\n          <TextField\n            disabled={isDisable}\n            margin=\"normal\"\n            hidden={hidden}\n            fullWidth\n            label={label}\n            placeholder={placeholder}\n            type={type}\n            required={Required}\n            value={Value ? Value : name.value}\n            onChange={handleChangeText}\n            onBlur={(e) => {\n              handleBlurText(e);\n            }}\n            error={error ? true : false}\n            size=\"small\"\n            sx={{\n              \"& .MuiInputLabel-root\": {\n                color:\n                  theme.palette.mode === \"dark\"\n                    ? \"#FAF0E6 !important\"\n                    : \"#352F44 !important\",\n              },\n              \"& .MuiOutlinedInput-input\": {\n                backgroundColor: \"none !important\",\n              },\n              \"& .MuiOutlinedInput-notchedOutline\": {},\n\n              display: isHidden ? \"none\" : \"block\",\n            }}\n            {...rest}\n          />\n          {error && (\n            <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n          )}\n        </>\n      )\n        : type === \"capvalue\" ? (\n          <>\n            <TextField\n              multiline={type === \"textarea\" ? true : false}\n              disabled={isDisable}\n              margin=\"none\"\n              hidden={hidden}\n              fullWidth\n              label={label}\n              placeholder={placeholder}\n              type={type}\n              required={Required}\n              value={Value ? Value : name.value}\n              onChange={handleChangeText}\n              onBlur={(e) => {\n                handleBlurText(e);\n              }}\n              error={error ? true : false}\n              size=\"small\"\n              sx={{\n                \"& .MuiInputLabel-root\": {\n                  color:\n                    theme.palette.mode === \"dark\"\n                      ? \"#FAF0E6 !important\"\n                      : \"#352F44 !important\",\n                },\n                \"& .MuiOutlinedInput-input\": {\n                  backgroundColor: \"none !important\",\n                },\n                display: isHidden ? \"none\" : \"block\",\n              }}\n              {...rest}\n            />\n            {error && (\n              <FormHelperText\n                style={{\n                  display: isHidden ? \"none\" : \"block\",\n                }}\n                sx={{ color: \"#FF0000\" }}\n              >\n                {error}\n              </FormHelperText>\n            )}\n          </>\n        ) : (\n          <>\n            <TextField\n              multiline={isMultiline}\n              disabled={isDisable}\n              margin=\"normal\"\n              hidden={hidden}\n              fullWidth\n              label={label}\n              placeholder={placeholder}\n              type={type}\n              required={Required}\n              value={Value ? Value : name.value}\n              onChange={handleChangeText}\n              onBlur={(e) => {\n                handleBlurText(e);\n              }}\n              error={error ? true : false}\n              size=\"small\"\n              sx={{\n                \"& .MuiInputLabel-root\": {\n                  color:\n                    theme.palette.mode === \"dark\"\n                      ? \"#FAF0E6 !important\"\n                      : \"#352F44 !important\",\n                },\n                \"& .MuiOutlinedInput-input\": {\n                  backgroundColor: \"none !important\",\n                },\n                \"& .MuiOutlinedInput-notchedOutline\": {},\n\n                display: isHidden ? \"none\" : \"block\",\n              }}\n              {...rest}\n            />\n            {error && (\n              <FormHelperText sx={{ color: \"#FF0000\" }}>{error}</FormHelperText>\n            )}\n          </>\n        )}\n    </>\n  );\n};\n\nexport default FormTextField;\n","import en from \"./en.json\";\nimport LocalizedStrings from \"react-localization\";\n\nexport let localLang = JSON.parse(localStorage.getItem(\"lang\"))\n  ? JSON.parse(localStorage.getItem(\"lang\"))\n  : \"en\";\n\nlet strings;\n\nif (!strings) {\n  strings = new LocalizedStrings({\n    en,\n  });\n}\n\nstrings.setLanguage(localLang);\n\nexport default strings;\n"],"names":["ERR_BLANK","strings","ERR_EMAIL","props","type","label","placeholder","Value","onChangeText","Required","CustomErrorLine","hidden","isDisable","isHidden","customFormat","prefix","isMultiline","priceSymbol","confirmErr","rest","theme","useTheme","name","setName","useState","value","error","success","formatLength","setFormatLength","setError","showPassword","setShowPassword","React","useEffect","undefined","inputData","output","removeSpacesAndBraces","length","handleChangeText","e","data","target","trimStart","emailTest","test","String","toLowerCase","textTest","handleBlurText","_jsx","_Fragment","children","_jsxs","PatternFormat","margin","size","fullWidth","format","onValueChange","onBlur","preventDefault","handleBlurNumber","valueIsNumericString","customInput","TextField","required","FormHelperText","sx","color","disabled","onChange","palette","mode","backgroundColor","display","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","handleClickShowPassword","show","onMouseDown","event","edge","MdVisibilityOff","MdVisibility","handleBlurPhone","startAdornment","mr","multiline","style","localLang","JSON","parse","localStorage","getItem","LocalizedStrings","en","setLanguage"],"sourceRoot":""}